{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/AI/AI.js","webpack:///./src/canvasButton.js","webpack:///./src/game.js","webpack:///./src/gameState/game.state.js","webpack:///./src/global.js","webpack:///./src/input.js","webpack:///./src/main.js","webpack:///./src/pieceState.js","webpack:///./src/stateStack.js","webpack:///./src/triangle.js","webpack:///./src/triangleChecker.js","webpack:///./src/triangoBoard.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAuC;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,8BAA8B,mDAAU;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mDAAU;AAC9B,KAAK;AACL;AACA;;AAEe,iEAAE,EAAC;;;;;;;;;;;;;AC7BlB;AAAA,4CAA4C,4BAA4B;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,yBAAyB;AACtC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEe,2EAAY,EAAC;;;;;;;;;;;;;ACrH5B;AAAA;AAAsC;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mDAAU;AACrC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEe,mEAAI,EAAC;;;;;;;;;;;;;ACnEpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+B;AACY;AAGlB;AACc;AACb;;;AAG1B,aAAa,+CAAM;AACnB,cAAc,+CAAM;AACpB,YAAY,+CAAM;AAClB,qBAAqB,0DAAY;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,qDAAY;AACpC;AACA;AACA,GAAG;AACH,sBAAsB,qDAAY;AAClC;AACA;AACA;AACA,GAAG;AACH,sBAAsB,qDAAY;AAClC;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,2BAA2B,MAAM,YAAY,MAAM;AACnD;AACA;AACA,CAAC;;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qDAAY;AAC/B;AACA,GAAG;AACH,mBAAmB,qDAAY;AAC/B;AACA,GAAG;AACH,mBAAmB,qDAAY;AAC/B;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qDAAY;AACpC;AACA;AACA,GAAG;AACH,sBAAsB,qDAAY;AAClC;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,2BAA2B,MAAM,YAAY,MAAM;AACnD,oBAAoB,kCAAkC;AACtD;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qDAAY;AACvC,iEAAiE,mDAAU,SAAS,mDAAU;AAC9F;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,uBAAuB,qDAAY;AACnC;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,mDAAU;AACrE,uCAAuC,mDAAU;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oEAAoE,mDAAU;AAC9E,QAAQ,mDAAU,SAAS,mDAAU;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,mDAAU;AACjE;AACA;AACA;AACA,CAAC;;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8CAAE;AACnB,8CAA8C,mDAAU;AACxD,gCAAgC,mDAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAEc,yEAAU,EAAC;;;;;;;;;;;;;ACpS1B;AAAA;AAAA;AAA0B;AACE;;AAE5B;AACA,mBAAmB,6CAAI;AACvB,oBAAoB,8CAAK;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;AAGc,qEAAM,EAAC;;;;;;;;;;;;;AChBtB;AAAA;AACA;AACA;AACA,aAAa,kBAAkB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEe,oEAAK,EAAC;;;;;;;;;;;;;AC9ErB;AAAA;AAAA;AAA8B;AACqB;;AAEnD;AACA,eAAe,+CAAM;AACrB,mBAAmB,6DAAa;AAChC;AACA;AACA;;AAEA;;;;;;;;;;;;;ACVA;AAAA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,yEAAU,EAAC;;;;;;;;;;;;;ACf1B;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;;AAEA;AACA,oCAAoC;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEe,yEAAU,EAAC;;;;;;;;;;;;;ACvD1B;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAc,yBAAyB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEe,uEAAQ,EAAC;;;;;;;;;;;;;ACvExB;AAAA;AAAA;AAAkC;AACI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA;AACA,aAAa,mDAAU;AACvB;AACA;AACA,aAAa,mDAAU;AACvB;AACA;AACA,aAAa,mDAAU;AACvB;AACA;AACA,aAAa,mDAAU;AACvB;AACA;AACA,aAAa,mDAAU;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,2BAA2B,mDAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B,aAAa;AACb;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB,cAAc,mBAAmB;AACjC,aAAa,SAAS;AACtB;AACA;AACA,wBAAwB,iDAAQ;AAChC;AACA,gBAAgB,mDAAU;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEe,8EAAe,EAAC;;;;;;;;;;;;;AC/I/B;AAAA;AAAA;AAAA;AAAA;AAAsC;AACK;;AAE3C;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B,QAAQ;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;;AAEA;AACA;AACA,aAAa,gBAAgB;AAC7B;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,WAAW;AACtB;AACA;AACA;AACA,SAAS,mDAAU;AACnB,aAAa,mDAAU;AACvB,SAAS,mDAAU;AACnB,aAAa,mDAAU;AACvB;AACA,aAAa,mDAAU;AACvB;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB,mBAAmB;AACnB,iBAAiB;AACjB,gBAAgB;AAChB,wBAAwB,mDAAU;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kBAAkB,OAAO;AACzC;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,mDAAU;AACvB;AACA;AACA;AACA,aAAa,mDAAU;AACvB;AACA;AACA,aAAa,mDAAU;AACvB;AACA;AACA,aAAa,mDAAU;AACvB;AACA;AACA,aAAa,mDAAU;AACvB;AACA,WAAW,mDAAU;AACrB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,WAAW,mDAAU;AACrB;AACA;AACA,WAAW,mDAAU;AACrB;AACA;AACA,WAAW,mDAAU;AACrB;AACA;AACA,WAAW,mDAAU;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB,OAAO;AAC5B,mCAAmC,mDAAU;AAC7C;AACA;AACA;AACA,0CAA0C,mDAAU;AACpD,WAAW;;AAEX;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,iCAAiC,mDAAU;AAC3C,2BAA2B,mDAAU;AACrC,OAAO;AACP,2BAA2B,mDAAU;AACrC;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mDAAU,kBAAkB,mDAAU,eAAe,mDAAU;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mDAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;;AAEA;AACA,qCAAqC,mDAAU;AAC/C,KAAK;AACL;AACA;;AAEA;AACA,mBAAmB;AACnB,mBAAmB;AACnB,iBAAiB;AACjB,gBAAgB;AAChB,wBAAwB,mDAAU;AAClC;AACA;AACA;;AAEA;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB,OAAO;AAC5B;AACA,+BAA+B,wDAAU;AACzC;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAKE","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/main.js\");\n","import PieceState from '../pieceState';\r\n\r\nclass AI {\r\n  constructor(board, callback, onGameEnd) {\r\n    this.board = board;\r\n    this.onGameEnd = onGameEnd;\r\n    this.worker = new Worker('./js/AI.worker.js');\r\n    this.worker.onmessage = (e) => {\r\n      callback && callback(e.data);\r\n    };\r\n  }\r\n\r\n\r\n  run() {\r\n    this.board.updateBanAndKo(PieceState.white);\r\n    if (this.board.isGameEnd()) {\r\n      this.onGameEnd && this.onGameEnd();\r\n      return;\r\n    }\r\n    this.worker.postMessage({\r\n      white: this.board.data.white,\r\n      black: this.board.data.black,\r\n      ban: this.board.data.ban,\r\n      ko: this.board.data.ko,\r\n      currentColor: PieceState.white,\r\n    });\r\n  }\r\n}\r\n\r\nexport default AI;\r\n","/* eslint no-unused-expressions: [\"error\", { \"allowShortCircuit\": true }] */\r\n\r\nclass CanvasButton {\r\n  constructor(x, y, w, h, r, text, onclick, onmousedown, onmouseup, onmouseleave, onnormal) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.w = w;\r\n    this.h = h;\r\n    this.r = r;\r\n    this.text = text;\r\n    this.onclick = onclick;\r\n    this.onmousedown = onmousedown;\r\n    this.onmouseup = onmouseup;\r\n    this.onmouseleave = onmouseleave;\r\n    this.onnormal = onnormal;\r\n    this.state = 0;\r\n    this.states = {\r\n      normal: 0,\r\n      pressed: 1,\r\n      hover: 2,\r\n    };\r\n    this.hidden = false;\r\n  }\r\n\r\n  /**\r\n   * @param {CanvasRenderingContext2D} ctx\r\n   */\r\n  render(ctx) {\r\n    if (this.hidden) {\r\n      return;\r\n    }\r\n\r\n    const w = this.w + this.r / 2;\r\n    const h = this.h + this.r / 2;\r\n    const x = this.x - w / 2;\r\n    const y = this.y - h / 2;\r\n    const {\r\n      r,\r\n    } = this;\r\n    const pi = Math.PI;\r\n\r\n    ctx.beginPath();\r\n\r\n    // ctx.rect(x, y, this.w, this.h);\r\n    ctx.lineTo(x, y + h - r);\r\n    ctx.arc(x + r, y + r, r, pi, pi * 1.5);\r\n    ctx.lineTo(x + w - r, y);\r\n    ctx.arc(x + w - r, y + r, r, pi * 1.5, pi * 2);\r\n    ctx.lineTo(w + x, y + h - r);\r\n    ctx.arc(x + w - r, y + h - r, r, 0, pi * 0.5);\r\n    ctx.lineTo(x + r, h + y);\r\n    ctx.arc(x + r, y + h - r, r, pi * 0.5, pi);\r\n\r\n    switch (this.state) {\r\n      case this.states.normal:\r\n        ctx.fillStyle = 'white';\r\n        break;\r\n      case this.states.pressed:\r\n        ctx.fillStyle = 'gray';\r\n        break;\r\n      case this.states.hover:\r\n        ctx.fillStyle = 'yellow';\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    ctx.fill();\r\n    ctx.strokeStyle = 'black';\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n    ctx.font = '20px Georgia';\r\n    ctx.textBaseline = 'middle';\r\n    ctx.textAlign = 'center';\r\n    ctx.fillStyle = 'black';\r\n    ctx.fillText(this.text, this.x, this.y, this.w - this.r / 2);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {number} mx\r\n   * @param {number} my\r\n   * @param {boolen} lbtndown\r\n   */\r\n  handleInput(mx, my, lbtndown) {\r\n    if (this.hidden) {\r\n      return;\r\n    }\r\n    const x1 = this.x - this.w / 2;\r\n    const y1 = this.y - this.h / 2;\r\n    const x2 = this.x + this.w / 2;\r\n    const y2 = this.y + this.h / 2;\r\n\r\n    if (mx > x1 && my > y1 && mx < x2 && my < y2) {\r\n      if (lbtndown) {\r\n        if (this.state === this.states.hover || this.state === this.states.normal) {\r\n          this.onclick && this.onclick();\r\n        } else {\r\n          this.onmousedown && this.onmousedown();\r\n        }\r\n        this.state = this.states.pressed;\r\n      } else {\r\n        if (this.state === this.states.pressed) {\r\n          this.onmouseup && this.onmouseup();\r\n        }\r\n        this.state = this.states.hover;\r\n      }\r\n    } else {\r\n      if (this.state === this.states.pressed) {\r\n        this.onmouseleave && this.onmouseleave();\r\n      } else {\r\n        this.onnormal && this.onnormal();\r\n      }\r\n      this.state = this.states.normal;\r\n    }\r\n  }\r\n}\r\n\r\nexport default CanvasButton;\r\n","import StateStack from './stateStack';\r\n\r\nclass Game {\r\n  constructor() {\r\n    this.canvas = document.createElement('canvas');\r\n    this.canvas.width = 800;\r\n    this.canvas.height = 600;\r\n    this.ctx = this.canvas.getContext('2d');\r\n    this.ms_update_delay = 16;\r\n    this.state_stack = new StateStack();\r\n  }\r\n\r\n  getCanvas() {\r\n    return this.canvas;\r\n  }\r\n\r\n  handleInput() {\r\n    this.state_stack.handleInput();\r\n  }\r\n\r\n  update() {\r\n    this.state_stack.update();\r\n  }\r\n\r\n  render() {\r\n    this.ctx.fillStyle = '#CCC';\r\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    this.state_stack.render();\r\n  }\r\n\r\n  run() {\r\n    let previous = (new Date()).getTime();\r\n    let lag = 0.0;\r\n\r\n    const gameloop = () => {\r\n      const current = (new Date()).getTime();\r\n      const elapsed = current - previous;\r\n      previous = current;\r\n      lag += elapsed;\r\n      this.handleInput();\r\n\r\n      while (lag >= this.ms_update_delay) {\r\n        this.update();\r\n        lag -= this.ms_update_delay;\r\n      }\r\n      this.render();\r\n      requestAnimationFrame(gameloop);\r\n    };\r\n\r\n    requestAnimationFrame(gameloop);\r\n  }\r\n\r\n  changeState(state) {\r\n    this.state_stack.push(state);\r\n    this.state_stack.start();\r\n  }\r\n\r\n  getState() {\r\n    return this.state_stack.peek();\r\n  }\r\n\r\n  lastState() {\r\n    this.state_stack.pop();\r\n    this.state_stack.start();\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import global from '../global';\r\nimport CanvasButton from '../canvasButton';\r\nimport {\r\n  TriangoBoard,\r\n} from '../triangoBoard';\r\nimport PieceState from '../pieceState';\r\nimport AI from '../AI/AI';\r\n\r\n\r\nconst game = global.getGame();\r\nconst input = global.getInput();\r\nconst ctx = global.getCtx();\r\nconst triangoBoard = TriangoBoard.instance;\r\n\r\n/**\r\n * 所有游戏状态\r\n */\r\nconst GameStates = {\r\n  gameStart: null,\r\n  gameEnd: null,\r\n  debug: null,\r\n  twoP: null,\r\n  playersTurn: null,\r\n  aisTurn: null,\r\n};\r\n\r\nconst gameScene = (() => {\r\n  const o = {};\r\n\r\n  function GameEnd() {\r\n    game.changeState(GameStates.gameEnd);\r\n  }\r\n  const btnReturn = new CanvasButton(80, 50, 80, 50, 20, 'return', () => {\r\n    triangoBoard.clear();\r\n    game.changeState(GameStates.gameStart);\r\n  });\r\n  const btnUndo = new CanvasButton(80, 150, 80, 50, 20, 'undo', () => {\r\n    if (triangoBoard.undo()) {\r\n      triangoBoard.updateAllCheckers();\r\n    }\r\n  });\r\n  const btnRedo = new CanvasButton(80, 250, 80, 50, 20, 'redo', () => {\r\n    if (triangoBoard.redo()) {\r\n      triangoBoard.updateAllCheckers();\r\n    }\r\n  });\r\n  o.handleInputWithoutBoard = () => {\r\n    const x = input.mouseX;\r\n    const y = input.mouseY;\r\n    const lbtndown = input.lBtnDown;\r\n    btnReturn.handleInput(x, y, lbtndown);\r\n    btnRedo.handleInput(x, y, lbtndown);\r\n    btnUndo.handleInput(x, y, lbtndown);\r\n  };\r\n  o.handleInput = (onBoardChange) => {\r\n    const x = input.mouseX;\r\n    const y = input.mouseY;\r\n    const lbtndown = input.lBtnDown;\r\n    btnReturn.handleInput(x, y, lbtndown);\r\n    btnRedo.handleInput(x, y, lbtndown);\r\n    btnUndo.handleInput(x, y, lbtndown);\r\n    return triangoBoard.handleInput(x, y, lbtndown, onBoardChange, GameEnd);\r\n  };\r\n  o.update = () => {\r\n    triangoBoard.update();\r\n  };\r\n  o.render = () => {\r\n    triangoBoard.render(ctx);\r\n    btnRedo.render(ctx);\r\n    btnUndo.render(ctx);\r\n    btnReturn.render(ctx);\r\n    const {\r\n      black,\r\n      white,\r\n    } = triangoBoard.getScore();\r\n    ctx.fillText(`Black:[${black}]  White:[${white}]`, 650, 50);\r\n  };\r\n  return o;\r\n})();\r\n\r\n\r\n// ///////////////////////////////////////\r\n/**\r\n * 游戏开始（设置）界面\r\n */\r\n// ///////////////////////////////////////\r\nGameStates.gameStart = (function GameStart() {\r\n  const o = {};\r\n  const btn1 = new CanvasButton(290, 120, 50, 50, 20, '2P', () => {\r\n    game.changeState(GameStates.twoP);\r\n  });\r\n  const btn2 = new CanvasButton(390, 120, 50, 50, 20, 'AI', () => {\r\n    game.changeState(GameStates.playersTurn);\r\n  });\r\n  const btn3 = new CanvasButton(505, 120, 80, 50, 20, 'debug', () => {\r\n    game.changeState(GameStates.debug);\r\n  });\r\n  o.handleInput = () => {\r\n    const x = input.mouseX;\r\n    const y = input.mouseY;\r\n    const lbtndown = input.lBtnDown;\r\n    btn1.handleInput(x, y, lbtndown);\r\n    btn2.handleInput(x, y, lbtndown);\r\n    btn3.handleInput(x, y, lbtndown);\r\n  };\r\n  o.render = () => {\r\n    btn1.render(ctx);\r\n    btn2.render(ctx);\r\n    btn3.render(ctx);\r\n    ctx.fillStyle = 'black';\r\n    ctx.fillText('GameStart!', 400, 50);\r\n  };\r\n  return o;\r\n}());\r\n\r\n// ///////////////////////////////////////\r\n/**\r\n * 游戏结束界面\r\n */\r\n// ///////////////////////////////////////\r\nGameStates.gameEnd = (function GameEnd() {\r\n  const o = {};\r\n  const btnReturn = new CanvasButton(80, 50, 80, 50, 20, 'return', () => {\r\n    triangoBoard.clear();\r\n    game.changeState(GameStates.gameStart);\r\n  });\r\n  const btnUndo = new CanvasButton(80, 150, 80, 50, 20, 'undo', () => {\r\n    triangoBoard.undo();\r\n    game.lastState();\r\n  });\r\n  o.handleInput = () => {\r\n    const x = input.mouseX;\r\n    const y = input.mouseY;\r\n    const lbtndown = input.lBtnDown;\r\n    btnReturn.handleInput(x, y, lbtndown);\r\n    btnUndo.handleInput(x, y, lbtndown);\r\n  };\r\n  o.update = () => {\r\n    triangoBoard.update();\r\n  };\r\n  o.render = () => {\r\n    triangoBoard.render(ctx);\r\n    btnReturn.render(ctx);\r\n    btnUndo.render(ctx);\r\n    ctx.fillStyle = 'black';\r\n    ctx.fillText('GameEnd!', 400, 30);\r\n    const {\r\n      black,\r\n      white,\r\n    } = triangoBoard.getScore();\r\n    ctx.fillText(`Black:[${black}]  White:[${white}]`, 400, 80);\r\n    ctx.fillText(`${black > white ? 'Black' : 'White'} Win`, 400, 130);\r\n  };\r\n  return o;\r\n}());\r\n\r\n// ///////////////////////////////////////\r\n/**\r\n * debug mode\r\n */\r\n// ///////////////////////////////////////\r\nGameStates.debug = (() => {\r\n  const o = {};\r\n  const btnSwapColor = new CanvasButton(210, 50, 80, 50, 20, 'black', () => {\r\n    triangoBoard.setCurrentColor(btnSwapColor.text === 'black' ? PieceState.white : PieceState.black);\r\n    triangoBoard.updateBanAndKo(triangoBoard.getCurrentColor());\r\n    triangoBoard.updateAllCheckers();\r\n    if (triangoBoard.isGameEnd()) {\r\n      game.changeState(GameStates.gameEnd);\r\n    }\r\n  });\r\n  const btnClear = new CanvasButton(460, 50, 80, 50, 20, 'clear', () => {\r\n    triangoBoard.clear();\r\n  });\r\n  o.handleInput = () => {\r\n    const x = input.mouseX;\r\n    const y = input.mouseY;\r\n    const lbtndown = input.lBtnDown;\r\n    btnSwapColor.handleInput(x, y, lbtndown);\r\n    btnClear.handleInput(x, y, lbtndown);\r\n    gameScene.handleInput();\r\n  };\r\n  o.update = () => {\r\n    btnSwapColor.text = triangoBoard.getCurrentColor() === PieceState.white ? 'white' : 'black';\r\n    triangoBoard.getCurrentColor() === PieceState.white\r\n      ? btnSwapColor.x = 210 : btnSwapColor.x = 330;\r\n    gameScene.update();\r\n  };\r\n  o.render = () => {\r\n    btnSwapColor.render(ctx);\r\n    btnClear.render(ctx);\r\n    gameScene.render();\r\n  };\r\n  return o;\r\n})();\r\n\r\n// ///////////////////////////////////////\r\n/**\r\n * 2个人轮流下棋\r\n */\r\n// ///////////////////////////////////////\r\nGameStates.twoP = (() => {\r\n  const o = {};\r\n\r\n  function swapColor() {\r\n    triangoBoard.setCurrentColor(triangoBoard.getCurrentColor() === PieceState.black\r\n      ? PieceState.white : PieceState.black);\r\n  }\r\n\r\n  o.handleInput = () => {\r\n    gameScene.handleInput(swapColor);\r\n  };\r\n  o.update = () => {\r\n    gameScene.update();\r\n  };\r\n  o.render = () => {\r\n    gameScene.render();\r\n    ctx.fillStyle = 'black';\r\n    ctx.fillText('current:', 240, 50);\r\n    ctx.fillStyle = triangoBoard.getCurrentColor() === PieceState.black ? 'black' : 'white';\r\n    ctx.fillRect(300, 40, 20, 20);\r\n  };\r\n  return o;\r\n})();\r\n\r\n\r\n// ///////////////////////////////////////\r\n/**\r\n * 轮到玩家的回合\r\n */\r\n// ///////////////////////////////////////\r\nGameStates.playersTurn = (function PlayersTurn() {\r\n  const o = {};\r\n\r\n  function waitAI() {\r\n    game.changeState(GameStates.aisTurn);\r\n  }\r\n\r\n  o.handleInput = () => {\r\n    gameScene.handleInput(waitAI);\r\n  };\r\n  o.update = () => {\r\n    gameScene.update();\r\n  };\r\n  o.render = () => {\r\n    gameScene.render();\r\n    ctx.fillStyle = 'black';\r\n    ctx.fillText('player', 400, 50);\r\n  };\r\n  return o;\r\n}());\r\n\r\n// ///////////////////////////////////////\r\n/**\r\n * 轮到轮到AI的回合\r\n * class AIsTurn : InGame\r\n */\r\n// ///////////////////////////////////////\r\nGameStates.aisTurn = (function AIsTurn() {\r\n  const o = {};\r\n  const ai = new AI(triangoBoard, (point) => {\r\n    triangoBoard.placePiece(point.x, point.y, PieceState.white);\r\n    triangoBoard.updateBanAndKo(PieceState.black);\r\n    triangoBoard.updateAllCheckers();\r\n    triangoBoard.data.history.current -= 1;\r\n    triangoBoard.save();\r\n    game.changeState(GameStates.playersTurn);\r\n    if (triangoBoard.isGameEnd()) {\r\n      game.changeState(GameStates.gameEnd);\r\n    }\r\n  }, () => {\r\n    triangoBoard.updateAllCheckers();\r\n    game.changeState(GameStates.gameStart);\r\n    game.changeState(GameStates.gameEnd);\r\n  });\r\n  o.handleInput = () => {\r\n    gameScene.handleInputWithoutBoard();\r\n  };\r\n  o.start = () => {\r\n    ai.run();\r\n  };\r\n  o.update = () => {\r\n    gameScene.update();\r\n  };\r\n  o.render = () => {\r\n    gameScene.render();\r\n    ctx.fillStyle = 'black';\r\n    ctx.fillText('AI', 400, 50);\r\n  };\r\n  return o;\r\n}());\r\n\r\nexport default GameStates;\r\n","import Game from './game';\r\nimport Input from './input';\r\n\r\nconst global = (() => {\r\n  const game = new Game();\r\n  const input = new Input(game.canvas);\r\n  input.listen();\r\n  return {\r\n    getGame: () => game,\r\n    getCtx: () => game.ctx,\r\n    getCanvas: () => game.canvas,\r\n    getInput: () => input,\r\n  };\r\n})();\r\n\r\n\r\nexport default global;\r\n","class Input {\r\n  /**\r\n   * 监听输入\r\n   * @param {HTMLCanvasElement} canvas\r\n   */\r\n  constructor(canvas) {\r\n    this.canvas = canvas;\r\n    this.keyDown = {};\r\n    this.keyCodeDown = new Array(256);\r\n    this.mouseX = 0;\r\n    this.mouseY = 0;\r\n    this.mouseWheel = 0;\r\n    this.lBtnDown = false;\r\n    this.mBtnDown = false;\r\n    this.rBtnDown = false;\r\n    this.mouseLeave = true;\r\n  }\r\n\r\n  listen() {\r\n    this.canvas.addEventListener('mouseleave', () => {\r\n      this.mouseLeave = true;\r\n    });\r\n    this.canvas.addEventListener('mouseenter', () => {\r\n      this.mouseLeave = false;\r\n    });\r\n    this.canvas.addEventListener('mousemove', (e) => {\r\n      this.mouseX = e.offsetX;\r\n      this.mouseY = e.offsetY;\r\n    });\r\n    this.canvas.addEventListener('mousedown', (e) => {\r\n      this.mouseX = e.offsetX;\r\n      this.mouseY = e.offsetY;\r\n      switch (e.button) {\r\n        case 0:\r\n          this.lBtnDown = true;\r\n          break;\r\n        case 1:\r\n          this.mBtnDown = true;\r\n          break;\r\n        case 2:\r\n          this.rBtnDown = true;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n    this.canvas.addEventListener('mouseup', (e) => {\r\n      this.mouseX = e.offsetX;\r\n      this.mouseY = e.offsetY;\r\n      switch (e.button) {\r\n        case 0:\r\n          this.lBtnDown = false;\r\n          break;\r\n        case 1:\r\n          this.mBtnDown = false;\r\n          break;\r\n        case 2:\r\n          this.rBtnDown = false;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n    this.canvas.addEventListener('wheel', (e) => {\r\n      this.mouseWheel += Math.round(e.deltaY / 100);\r\n      this.mouseWheel = (this.mouseWheel + 100) % 100;\r\n    });\r\n    window.addEventListener('keydown', (e) => {\r\n      this.keyDown[e.key] = true;\r\n      this.keyCodeDown[e.keyCode] = true;\r\n    });\r\n    window.addEventListener('keyup', (e) => {\r\n      this.keyDown[e.key] = false;\r\n      this.keyCodeDown[e.keyCode] = false;\r\n    });\r\n  }\r\n}\r\n\r\nexport default Input;\r\n","import global from './global';\r\nimport allGameStates from './gameState/game.state';\r\n\r\nfunction main() {\r\n  const game = global.getGame();\r\n  game.changeState(allGameStates.gameStart);\r\n  document.getElementById('triango').appendChild(game.getCanvas());\r\n  game.run();\r\n}\r\n\r\nmain();\r\n","/**\r\n * 棋子状态的枚举\r\n * Enum for piece state\r\n * @readonly\r\n * @enum {number}\r\n */\r\nconst PieceState = {\r\n  void: -1,\r\n  blank: 0,\r\n  black: 1,\r\n  white: 2,\r\n  ban: 3,\r\n  ko: 4,\r\n};\r\n\r\nexport default PieceState;\r\n","class StateStack {\r\n  constructor() {\r\n    this.states = [];\r\n    this.top = 0;\r\n  }\r\n\r\n  pop() {\r\n    if (this.top < 1) {\r\n      return undefined;\r\n    }\r\n    return this.states[--this.top]; // eslint-disable-line\r\n  }\r\n\r\n  push(state) {\r\n    this.states[this.top++] = state; // eslint-disable-line\r\n  }\r\n\r\n  peek() {\r\n    if (this.top > 0) {\r\n      return this.states[this.top - 1];\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  length() {\r\n    return this.top;\r\n  }\r\n\r\n  clear() {\r\n    delete this.states;\r\n    this.states = [];\r\n    this.top = 0;\r\n  }\r\n\r\n  start() {\r\n    const topState = this.peek();\r\n    return topState && topState.start && topState.start();\r\n  }\r\n\r\n  handleInput() {\r\n    const topState = this.peek();\r\n    return topState && topState.handleInput && topState.handleInput();\r\n  }\r\n\r\n  update() {\r\n    const topState = this.peek();\r\n    return topState && topState.update && topState.update();\r\n  }\r\n\r\n  render() {\r\n    const topState = this.peek();\r\n    return topState && topState.render && topState.render();\r\n  }\r\n}\r\n\r\nexport default StateStack;\r\n","const radical3 = 1.732;\r\nconst tan60 = radical3;\r\nconst cos30 = radical3 / 2;\r\n\r\nclass Triangle {\r\n  constructor(x, y, r, up = true, color = 'white') {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.r = r;\r\n    this.up = up;\r\n    this.color = color;\r\n    this.creatShape();\r\n  }\r\n\r\n  creatShape() {\r\n    this.x1 = this.x;\r\n    this.y1 = this.y;\r\n    this.x2 = this.x + this.r * radical3;\r\n    this.y2 = this.y;\r\n    this.x3 = this.x + this.r * cos30;\r\n    this.y3 = this.y + 1.5 * this.r;\r\n    if (this.up) {\r\n      this.y3 = this.y;\r\n      this.y2 = this.y + 1.5 * this.r;\r\n      this.y1 = this.y + 1.5 * this.r;\r\n    }\r\n  }\r\n\r\n  /** @param {CanvasRenderingContext2D} ctx */\r\n  draw(ctx) {\r\n    ctx.beginPath();\r\n    ctx.moveTo(this.x1, this.y1);\r\n    ctx.lineTo(this.x2, this.y2);\r\n    ctx.lineTo(this.x3, this.y3);\r\n    ctx.fillStyle = this.color;\r\n    ctx.closePath();\r\n    ctx.fill();\r\n    ctx.strokeStyle = 'black';\r\n    ctx.stroke();\r\n  }\r\n\r\n  mouseCheck(x, y) {\r\n    if (x < this.x1 || x > this.x2) {\r\n      return false;\r\n    }\r\n    if (!this.up) {\r\n      if (y > this.y3 || y < this.y1) {\r\n        return false;\r\n      }\r\n    } else if (y < this.y3 || y > this.y1) {\r\n      return false;\r\n    }\r\n    if (this.up) {\r\n      if (x < this.x3) {\r\n        if (y < (x - this.x3) * -tan60 + this.y3) {\r\n          return false;\r\n        }\r\n      } else if (y < (x - this.x3) * tan60 + this.y3) {\r\n        return false;\r\n      }\r\n    } else if (x < this.x3) {\r\n      if (y > (x - this.x1) * tan60 + this.y1) {\r\n        return false;\r\n      }\r\n    } else if (y > (x - this.x3) * -tan60 + this.y3) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\nexport default Triangle;\r\n","import Triangle from './triangle';\r\nimport PieceState from './pieceState';\r\n/**\r\n * All checker state object\r\n * @readonly\r\n */\r\nconst CheckerState = {\r\n  normal: {\r\n    /**\r\n     * @fanction\r\n     * @param {TriangleChecker} checker\r\n     */\r\n    onStart: (checker) => {\r\n      let szColor = 'gray';\r\n      switch (checker.data) {\r\n        case PieceState.black:\r\n          szColor = 'black';\r\n          break;\r\n        case PieceState.white:\r\n          szColor = 'white';\r\n          break;\r\n        case PieceState.blank:\r\n          szColor = 'gray';\r\n          break;\r\n        case PieceState.ban:\r\n          szColor = 'pink';\r\n          break;\r\n        case PieceState.ko:\r\n          szColor = 'green';\r\n          break;\r\n        default:\r\n          szColor = 'blue';\r\n          break;\r\n      }\r\n      checker.setColor(szColor);\r\n    },\r\n    update: (checker) => {\r\n      CheckerState.normal.onStart(checker);\r\n    },\r\n    handleInput: (x, y, lBtnDown, checker) => {\r\n      if (checker.data !== PieceState.blank) {\r\n        return;\r\n      }\r\n      if (!checker.triangle.mouseCheck(x, y)) {\r\n        return;\r\n      }\r\n      if (lBtnDown) {\r\n        checker.changeState(CheckerState.keydown);\r\n      } else {\r\n        checker.changeState(CheckerState.hover);\r\n      }\r\n    },\r\n  },\r\n  hover: {\r\n    /**\r\n     * @fanction\r\n     * @param {TriangleChecker} checker\r\n     */\r\n    onStart: (checker) => {\r\n      checker.setColor('yellow');\r\n    },\r\n    handleInput: (x, y, lBtnDown, checker) => {\r\n      if (lBtnDown) {\r\n        checker.changeState(CheckerState.keydown);\r\n      } else if (!checker.triangle.mouseCheck(x, y)) {\r\n        checker.changeState(CheckerState.normal);\r\n      }\r\n    },\r\n  },\r\n  keydown: {\r\n    onStart: (checker) => {\r\n      checker.setColor('red');\r\n    },\r\n    handleInput: (x, y, lBtnDown, checker) => {\r\n      if (!checker.triangle.mouseCheck(x, y)) {\r\n        checker.changeState(CheckerState.normal);\r\n      }\r\n      if (!lBtnDown) {\r\n        checker.onactive(checker);\r\n        checker.changeState(CheckerState.normal);\r\n      }\r\n    },\r\n  },\r\n};\r\n\r\n/**\r\n * 点击后发生的行为\r\n * @callback OnActive\r\n * @param {TriangleChecker} checker\r\n * @returns {pieceState}\r\n */\r\n\r\nclass TriangleChecker {\r\n  /**\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} r\r\n   * @param {boolean} up\r\n   * @param {{x:number,y:number}} coordinate\r\n   * @param {OnActive} onactive\r\n   */\r\n  constructor(x, y, r, up, coordinate, onactive) {\r\n    this.triangle = new Triangle(x, y, r, up);\r\n    this.coordinate = coordinate;\r\n    this.data = PieceState.blank;\r\n    this.state = CheckerState.normal;\r\n    this.state.onStart(this);\r\n    this.onactive = onactive;\r\n  }\r\n\r\n  /**\r\n   * 设置该棋盘格上的棋子数据\r\n   * set piece state of this checker\r\n   * @param {PieceState} pieceState\r\n   * @example setData(PieceState.blank|PieceState.white|PieceState.black)\r\n   */\r\n  setData(pieceState) {\r\n    this.data = pieceState;\r\n  }\r\n\r\n  setColor(color) {\r\n    this.triangle.color = color;\r\n  }\r\n\r\n  changeState(state) {\r\n    this.state = state;\r\n    this.state.onStart(this);\r\n  }\r\n\r\n  render(ctx) {\r\n    return this.triangle.draw && this.triangle.draw(ctx);\r\n  }\r\n\r\n  handleInput(x, y, lBtnDown) {\r\n    return this.state.handleInput && this.state.handleInput(x, y, lBtnDown, this);\r\n  }\r\n\r\n  update() {\r\n    return this.state.update && this.state.update(this);\r\n  }\r\n}\r\n\r\nexport default TriangleChecker;\r\n","import PieceState from './pieceState';\r\nimport TriChecker from './triangleChecker';\r\n\r\nconst cos30 = 0.866;\r\n\r\nclass History {\r\n  constructor(data) {\r\n    this.data = [];\r\n    this.current = -1;\r\n    this.push(data);\r\n  }\r\n\r\n  push(data) {\r\n    this.data.length = this.current + 1;\r\n    this.data.push({\r\n      black: data.black,\r\n      white: data.white,\r\n      ban: data.ban,\r\n      ko: data.ko,\r\n      cclr: data.currentColor,\r\n    });\r\n    this.current += 1;\r\n  }\r\n\r\n  undo(data) {\r\n    this.current -= 1;\r\n    if (this.current === -1) {\r\n      this.current = 0;\r\n      return false;\r\n    }\r\n    const backup = this.data[this.current];\r\n    data.black = backup.black;\r\n    data.white = backup.white;\r\n    data.ko = backup.ko;\r\n    data.ban = backup.ban;\r\n    data.currentColor = backup.cclr;\r\n    return true;\r\n  }\r\n\r\n  redo(data) {\r\n    this.current += 1;\r\n    if (this.current === this.data.length) {\r\n      this.current = this.data.length - 1;\r\n      return false;\r\n    }\r\n    const backup = this.data[this.current];\r\n    data.black = backup.black;\r\n    data.white = backup.white;\r\n    data.ko = backup.ko;\r\n    data.ban = backup.ban;\r\n    data.currentColor = backup.cclr;\r\n    return true;\r\n  }\r\n\r\n  contain(black, white, currentColor) {\r\n    for (let i = this.current; i > -1; i -= 1) {\r\n      const backup = this.data[i];\r\n      if (backup.black === black && backup.white === white && backup.cclr === currentColor) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n    // return this.data.some((v, i) => i <= this.current\r\n    // && v.black === black && v.white === white && v.cclr === currentColor);\r\n  }\r\n\r\n  clear() {\r\n    this.data.length = 1;\r\n    this.current = 0;\r\n  }\r\n}\r\n\r\nclass OpenList {\r\n  constructor() {\r\n    this.data = [];\r\n  }\r\n\r\n  static index2xy(index) {\r\n    return {\r\n      x: index & 0b111,\r\n      y: index >>> 3,\r\n    };\r\n  }\r\n\r\n  static xy2index(xx, yy) {\r\n    let index = yy << 3;\r\n    index |= xx & 0b111;\r\n    return index;\r\n  }\r\n\r\n  push(x, y) {\r\n    this.data.push(OpenList.xy2index(x, y));\r\n  }\r\n\r\n  indexof(x, y) {\r\n    const index = OpenList.xy2index(x, y);\r\n    return this.data.indexOf(index);\r\n  }\r\n\r\n  clear() {\r\n    this.data.length = 0;\r\n  }\r\n\r\n  /**\r\n   * @callback forEachCallBack\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\r\n\r\n  /**\r\n   *\r\n   * @param {forEachCallBack} callback\r\n   */\r\n  forEach(callback) {\r\n    for (let i = 0; i < this.data.length; i += 1) {\r\n      const index = this.data[i];\r\n      const {\r\n        x,\r\n        y,\r\n      } = OpenList.index2xy(index);\r\n      callback(x, y);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 得到相反颜色\r\n * @param {PieceState} color\r\n */\r\nfunction getOppositeColor(color) {\r\n  switch (color) {\r\n    case PieceState.black:\r\n      return PieceState.white;\r\n    case PieceState.white:\r\n      return PieceState.black;\r\n    default:\r\n      return PieceState.void;\r\n  }\r\n}\r\n\r\nclass TriBoardData {\r\n  constructor(data) {\r\n    // 棋盘数据，棋盘大小4x2x4, 数据大小 32*4 bit\r\n    this.black = 0; // 黑棋\r\n    this.white = 0; // 白棋\r\n    this.ban = 0; // 禁入点\r\n    this.ko = 0; // 劫\r\n    this.currentColor = PieceState.black;\r\n    if (data) {\r\n      this.black = data.black;\r\n      this.white = data.white;\r\n      this.ban = data.ban;\r\n      this.ko = data.ko;\r\n      this.currentColor = data.currentColor;\r\n    }\r\n    this.history = new History(this);\r\n    /** @type {{x:number,y:number}[][][]} */\r\n    this.adjacencylist = [];\r\n    for (let i = 0; i < 8; i += 1) {\r\n      this.adjacencylist.push([]);\r\n    }\r\n    for (let j = 0; j < 4; j += 1) {\r\n      for (let i = 0; i < 8; i += 1) {\r\n        this.adjacencylist[i][j] = [];\r\n        const ii1 = i - 1;\r\n        const ii2 = i + 1;\r\n        const ii = (i & 1) ? i - 1 : i + 1;\r\n        const jj = (i & 1) ? j + 1 : j - 1;\r\n        if (ii1 > -1) {\r\n          this.adjacencylist[i][j].push({\r\n            x: ii1,\r\n            y: j,\r\n          });\r\n        }\r\n        if (ii2 < 8) {\r\n          this.adjacencylist[i][j].push({\r\n            x: ii2,\r\n            y: j,\r\n          });\r\n        }\r\n        if (ii < 8 && ii > -1 && jj < 4 && jj > -1) {\r\n          this.adjacencylist[i][j].push({\r\n            x: ii,\r\n            y: jj,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  swapColor() {\r\n    this.currentColor = getOppositeColor(this.currentColor);\r\n  }\r\n\r\n  save() {\r\n    this.history.push(this);\r\n  }\r\n\r\n  undo() {\r\n    return this.history.undo(this);\r\n  }\r\n\r\n  redo() {\r\n    return this.history.redo(this);\r\n  }\r\n\r\n  setCurrentColor(color) {\r\n    this.currentColor = color;\r\n  }\r\n\r\n  getScore() {\r\n    let black = 0;\r\n    let white = 0;\r\n\r\n    let temp = this.black;\r\n    while (temp) {\r\n      temp &= temp - 1;\r\n      black += 1;\r\n    }\r\n    temp = this.white;\r\n    while (temp) {\r\n      temp &= temp - 1;\r\n      white += 1;\r\n    }\r\n\r\n    return {\r\n      black,\r\n      white,\r\n    };\r\n  }\r\n\r\n  getData(x, y) {\r\n    if (x < 0 || x > 7 || y < 0 || y > 3) {\r\n      return PieceState.void;\r\n    }\r\n    const flag = 1 << (x | (y << 3));\r\n    if (this.black & flag) {\r\n      return PieceState.black;\r\n    }\r\n    if (this.white & flag) {\r\n      return PieceState.white;\r\n    }\r\n    if (this.ban & flag) {\r\n      return PieceState.ban;\r\n    }\r\n    if (this.ko & flag) {\r\n      return PieceState.ko;\r\n    }\r\n    return PieceState.blank;\r\n  }\r\n\r\n  setData(x, y, data) {\r\n    if (x < 0 || x > 7 || y < 0 || y > 3) {\r\n      return;\r\n    }\r\n    const flag = 1 << (x | (y << 3));\r\n\r\n    this.black &= ~flag;\r\n    this.white &= ~flag;\r\n    this.ban &= ~flag;\r\n    this.ko &= ~flag;\r\n\r\n    switch (data) {\r\n      case PieceState.black:\r\n        this.black |= flag;\r\n        break;\r\n      case PieceState.white:\r\n        this.white |= flag;\r\n        break;\r\n      case PieceState.ban:\r\n        this.ban |= flag;\r\n        break;\r\n      case PieceState.ko:\r\n        this.ko |= flag;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  isGameEnd() {\r\n    return (this.black | this.white | this.ban | this.ko) === -1;\r\n  }\r\n\r\n  updateBanAndKo(clr) {\r\n    this.ban = 0;\r\n    this.ko = 0;\r\n    const scanPoints = [];\r\n    for (let j = 0; j < 4; j += 1) {\r\n      for (let i = 0; i < 8; i += 1) {\r\n        if (this.getData(i, j) === PieceState.blank) {\r\n          const adjacencys = this.adjacencylist[i][j];\r\n          const sum = adjacencys.reduce((previous, current) => {\r\n            const color = this.getData(current.x, current.y);\r\n            return previous + ((color === PieceState.blank) ? 0 : 1);\r\n          }, 0);\r\n\r\n          if (sum === adjacencys.length) {\r\n            scanPoints.push({\r\n              x: i,\r\n              y: j,\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // update ban and ko\r\n    const backupBlack = this.black;\r\n    const backupWhite = this.white;\r\n    scanPoints.forEach((point) => {\r\n      const {\r\n        x,\r\n        y,\r\n      } = point;\r\n      this.setData(x, y, clr);\r\n      this.updateBlackAndWhite(x, y);\r\n      if (this.getData(x, y) === PieceState.blank) {\r\n        this.setData(x, y, PieceState.ban);\r\n      } else if (this.history.contain(this.black, this.white, getOppositeColor(clr))) {\r\n        this.setData(x, y, PieceState.ko);\r\n      }\r\n      this.black = backupBlack;\r\n      this.white = backupWhite;\r\n    });\r\n  }\r\n\r\n  updateBlackAndWhite(x, y) {\r\n    const openlist = new OpenList();\r\n    const adjacencys = this.adjacencylist[x][y];\r\n    const deletlist = [];\r\n\r\n    const test = (xx, yy, color) => {\r\n      if (openlist.indexof(xx, yy) > -1) {\r\n        return false;\r\n      }\r\n      const clr = this.getData(xx, yy);\r\n      if (clr === PieceState.blank || clr === PieceState.ko || clr === PieceState.ban) {\r\n        return true;\r\n      }\r\n      if (clr !== color) {\r\n        return false;\r\n      }\r\n      openlist.push(xx, yy);\r\n      const adjs = this.adjacencylist[xx][yy];\r\n      return adjs.reduce((total, adj) => total || test(adj.x, adj.y, color), false);\r\n      // return adjs.some(adj => test(adj.x, adj.y, color));\r\n    };\r\n\r\n    let hasLiberty;\r\n    let flag = false;\r\n    const color = this.getData(x, y);\r\n    adjacencys.forEach((adjacency) => {\r\n      if (openlist.indexof(adjacency.x, adjacency.y) !== -1) {\r\n        return;\r\n      }\r\n      const xx = adjacency.x;\r\n      const yy = adjacency.y;\r\n      const clr = this.getData(xx, yy);\r\n      if (clr !== getOppositeColor(color)) {\r\n        if (clr === PieceState.blank) {\r\n          flag = true;\r\n        }\r\n        return;\r\n      }\r\n      openlist.clear();\r\n      hasLiberty = test(xx, yy, clr);\r\n      if (!hasLiberty) {\r\n        flag = true;\r\n        openlist.forEach((xxx, yyy) => {\r\n          deletlist.push({\r\n            x: xxx,\r\n            y: yyy,\r\n          });\r\n        });\r\n      }\r\n    });\r\n\r\n    // 如果对方还有气\r\n    if (!flag) {\r\n      openlist.clear();\r\n      hasLiberty = test(x, y, color);\r\n      if (!hasLiberty) {\r\n        openlist.forEach((xxx, yyy) => {\r\n          deletlist.push({\r\n            x: xxx,\r\n            y: yyy,\r\n          });\r\n        });\r\n      }\r\n    }\r\n\r\n    deletlist.forEach((point) => {\r\n      this.setData(point.x, point.y, PieceState.blank);\r\n    });\r\n    openlist.clear();\r\n  }\r\n\r\n  clear() {\r\n    this.black = 0; // 黑棋\r\n    this.white = 0; // 白棋\r\n    this.ban = 0; // 禁入点\r\n    this.ko = 0; // 劫\r\n    this.currentColor = PieceState.black;\r\n    this.history.clear();\r\n  }\r\n}\r\n\r\nclass TriBoardView {\r\n  constructor(onactive) {\r\n    /** @type {TriChecker[]} */\r\n    this.triCheckers = [];\r\n    let up = true;\r\n    const r = 60;\r\n    const offsetX = 90;\r\n    const offsetY = 520;\r\n    const gapX = 1 / cos30;\r\n    const gapY = 1;\r\n    for (let j = 0; j < 4; j += 1) {\r\n      for (let i = 0; i < 8; i += 1) {\r\n        // 添加checker\r\n        const triChecker = new TriChecker(offsetX + i * (r * cos30 + gapX) + j * (r * cos30 + gapY),\r\n          offsetY - (1 + j) * (r * 1.5 + gapY), r, up, {\r\n            x: i,\r\n            y: j,\r\n          }, onactive);\r\n        this.triCheckers.push(triChecker);\r\n        up = !up;\r\n      }\r\n    }\r\n  }\r\n\r\n  update() {\r\n    this.triCheckers.forEach((triChecker) => {\r\n      triChecker.update();\r\n    });\r\n  }\r\n\r\n  render(ctx) {\r\n    this.triCheckers.forEach((triChecker) => {\r\n      triChecker.render(ctx);\r\n    });\r\n  }\r\n}\r\n\r\nclass TriangoBoard {\r\n  constructor() {\r\n    this.data = new TriBoardData();\r\n    this.view = new TriBoardView((checker) => {\r\n      const {\r\n        x,\r\n        y,\r\n      } = checker.coordinate;\r\n      this.placePiece(x, y, this.getCurrentColor());\r\n      return this.getCurrentColor();\r\n    });\r\n    this.updateAllCheckers();\r\n  }\r\n\r\n  save() {\r\n    this.data.save();\r\n  }\r\n\r\n  setCurrentColor(color) {\r\n    this.data.setCurrentColor(color);\r\n  }\r\n\r\n  undo() {\r\n    if (this.data.undo()) {\r\n      this.updateBanAndKo(this.getCurrentColor());\r\n      this.updateAllCheckers();\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  redo() {\r\n    if (this.data.redo()) {\r\n      this.updateBanAndKo(this.getCurrentColor());\r\n      this.updateAllCheckers();\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getScore() {\r\n    return this.data.getScore();\r\n  }\r\n\r\n  getData(x, y) {\r\n    return this.data.getData(x, y);\r\n  }\r\n\r\n  setData(x, y, data) {\r\n    this.data.setData(x, y, data);\r\n  }\r\n\r\n  placePiece(x, y, color) {\r\n    this.setData(x, y, color);\r\n    this.updateBlackAndWhite(x, y);\r\n  }\r\n\r\n  isGameEnd() {\r\n    return this.data.isGameEnd();\r\n  }\r\n\r\n  updateBanAndKo(color) {\r\n    this.data.updateBanAndKo(color);\r\n  }\r\n\r\n  updateBlackAndWhite(x, y) {\r\n    this.data.updateBlackAndWhite(x, y);\r\n  }\r\n\r\n  updateAllCheckers() {\r\n    this.view.triCheckers.forEach((triChecker) => {\r\n      const data = this.getData(triChecker.coordinate.x, triChecker.coordinate.y);\r\n      triChecker.setData(data);\r\n    });\r\n  }\r\n\r\n  update() {\r\n    this.view.update();\r\n  }\r\n\r\n  render(ctx) {\r\n    this.view.render(ctx);\r\n  }\r\n\r\n  getCurrentColor() {\r\n    return this.data.currentColor;\r\n  }\r\n\r\n  handleInput(x, y, lBtnDown, onBoardChange, onGameEnd) {\r\n    const oldData = {\r\n      black: this.data.black,\r\n      white: this.data.white,\r\n    };\r\n    this.view.triCheckers.forEach(triChecker => triChecker.handleInput(x, y, lBtnDown));\r\n\r\n    if (oldData.black !== this.data.black || oldData.white !== this.data.white) {\r\n      onBoardChange && onBoardChange();\r\n      this.updateBanAndKo(this.getCurrentColor());\r\n      this.updateAllCheckers();\r\n      this.save();\r\n      if (this.isGameEnd()) {\r\n        onGameEnd && onGameEnd();\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  clear() {\r\n    this.data.clear();\r\n    this.updateAllCheckers();\r\n  }\r\n}\r\n\r\nTriangoBoard.instance = new TriangoBoard();\r\n\r\nexport {\r\n  TriBoardData,\r\n  TriangoBoard,\r\n};\r\n"],"sourceRoot":""}