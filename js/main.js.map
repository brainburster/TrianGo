{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/game.js","webpack:///./src/gameState/game.state.js","webpack:///./src/global.js","webpack:///./src/input.js","webpack:///./src/main.js","webpack:///./src/stateStack.js","webpack:///./src/triangle.js","webpack:///./src/triangleChecker.js","webpack:///./src/triangoBoard.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAsC;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mDAAU;AACrC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEe,mEAAI,EAAC;;;;;;;;;;;;;AC7DpB;AAAA;AAAA;AAA+B;AACY;;AAE3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+CAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+CAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,aAAa,+CAAM;AACnB,wBAAwB,qDAAY;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+CAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+CAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAEc,4EAAa,EAAC;;;;;;;;;;;;;ACnF7B;AAAA;AAAA;AAA0B;AACE;;AAE5B;AACA,mBAAmB,6CAAI;AACvB,oBAAoB,8CAAK;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;AAGc,qEAAM,EAAC;;;;;;;;;;;;;AChBtB;AAAA;AACA;AACA;AACA,aAAa,kBAAkB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEe,oEAAK,EAAC;;;;;;;;;;;;;AC9ErB;AAAA;AAAA;AAA8B;AACqB;;AAEnD;AACA,eAAe,+CAAM;AACrB,mBAAmB,6DAAa;AAChC;AACA;AACA;;AAEA;;;;;;;;;;;;;ACVA;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;;AAEA,cAAc,MAAM;AACpB;AACA,oCAAoC;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEe,yEAAU,EAAC;;;;;;;;;;;;;ACzE1B;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAc,yBAAyB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEe,uEAAQ,EAAC;;;;;;;;;;;;;ACvExB;AAAA;AAAA;AAAkC;AACJ;;AAE9B,YAAY,+CAAM;AAClB,cAAc,+CAAM;;AAEpB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA,wBAAwB,iDAAQ;AAChC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEe,8EAAe,EAAC;;;;;;;;;;;;;ACtF/B;AAAA;AAAA;AACgD;;AAEhD;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oCAAoC;AACpC,oCAAoC;AACpC,kCAAkC;AAClC,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB,QAAQ;AAC7B,uCAAuC,wDAAe;AACtD;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB,aAAa,WAAW,aAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEe,2EAAY,EAAC","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/main.js\");\n","import StateStack from './stateStack';\r\n\r\nclass Game {\r\n  constructor() {\r\n    this.canvas = document.createElement('canvas');\r\n    this.canvas.width = 600;\r\n    this.canvas.height = 600;\r\n    this.ctx = this.canvas.getContext('2d');\r\n    this.ms_update_delay = 16;\r\n    this.state_stack = new StateStack();\r\n  }\r\n\r\n  getCanvas() {\r\n    return this.canvas;\r\n  }\r\n\r\n  handleInput() {\r\n    this.state_stack.handleInput();\r\n  }\r\n\r\n  update() {\r\n    this.state_stack.update();\r\n  }\r\n\r\n  render() {\r\n    this.ctx.fillStyle = '#CCC';\r\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    this.state_stack.render();\r\n  }\r\n\r\n  run() {\r\n    let previous = (new Date()).getTime();\r\n    let lag = 0.0;\r\n\r\n    const gameloop = () => {\r\n      const current = (new Date()).getTime();\r\n      const elapsed = current - previous;\r\n      previous = current;\r\n      lag += elapsed;\r\n      this.handleInput();\r\n\r\n      while (lag >= this.ms_update_delay) {\r\n        this.update();\r\n        lag -= this.ms_update_delay;\r\n      }\r\n      this.render();\r\n      requestAnimationFrame(gameloop);\r\n    };\r\n\r\n    requestAnimationFrame(gameloop);\r\n  }\r\n\r\n  changeState(state) {\r\n    this.state_stack.push(state);\r\n  }\r\n\r\n  rollbackState() {\r\n    return this.state_stack.pop();\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import global from '../global';\r\nimport TriangoBoard from '../triangoBoard';\r\n\r\nconst allGameStates = {\r\n  gameStart: null,\r\n  gameEnd: null,\r\n  playersTurn: null,\r\n  aisTurn: null,\r\n};\r\n\r\n// ///////////////////////////////////////\r\n/**\r\n * 游戏开始（设置）界面\r\n */\r\n// ///////////////////////////////////////\r\nallGameStates.gameStart = (function GameStart() {\r\n  const ctx = global.getCtx();\r\n  const o = {};\r\n  o.nextState = () => allGameStates.playersTurn;\r\n  o.handleInput = () => {};\r\n  o.render = () => {\r\n    ctx.fillStyle = 'black';\r\n    ctx.fillText('gameStart!', 50, 50);\r\n  };\r\n  return o;\r\n}());\r\n\r\n// ///////////////////////////////////////\r\n/**\r\n * 游戏结束界面\r\n */\r\n// ///////////////////////////////////////\r\nallGameStates.gameEnd = (function GameEnd() {\r\n  const ctx = global.getCtx();\r\n  const o = {};\r\n  o.nextState = () => allGameStates.gameStart;\r\n  o.handleInput = () => {};\r\n  o.render = () => {\r\n    ctx.fillStyle = 'black';\r\n    ctx.fillText('gameEnd!', 50, 50);\r\n  };\r\n  return o;\r\n}());\r\nconst game = global.getGame();\r\ngame.triangoBoard = new TriangoBoard();\r\n\r\n// ///////////////////////////////////////\r\n/**\r\n * 轮到玩家的回合\r\n */\r\n// ///////////////////////////////////////\r\nallGameStates.playersTurn = (function PlayersTurn() {\r\n  const ctx = global.getCtx();\r\n  const o = {};\r\n  o.nextState = () => allGameStates.aisTurn;\r\n  o.handleInput = () => {\r\n    game.triangoBoard.handleInput();\r\n  };\r\n  o.render = () => {\r\n    game.triangoBoard.render(ctx);\r\n  };\r\n  return o;\r\n}());\r\n\r\n// ///////////////////////////////////////\r\n/**\r\n * 轮到轮到AI的回合\r\n * class AIsTurn : InGame\r\n */\r\n// ///////////////////////////////////////\r\nallGameStates.aisTurn = (function AIsTurn() {\r\n  const ctx = global.getCtx();\r\n  const o = {};\r\n  o.nextState = () => allGameStates.playersTurn;\r\n  o.handleInput = () => {\r\n    game.triangoBoard.handleInput();\r\n  };\r\n  o.render = () => {\r\n    game.triangoBoard.render(ctx);\r\n  };\r\n  return o;\r\n}());\r\n\r\nexport default allGameStates;\r\n","import Game from './game';\r\nimport Input from './input';\r\n\r\nconst global = (() => {\r\n  const game = new Game();\r\n  const input = new Input(game.canvas);\r\n  input.listen();\r\n  return {\r\n    getGame: () => game,\r\n    getCtx: () => game.ctx,\r\n    getCanvas: () => game.canvas,\r\n    getInput: () => input,\r\n  };\r\n})();\r\n\r\n\r\nexport default global;\r\n","class Input {\r\n  /**\r\n   * 监听输入\r\n   * @param {HTMLCanvasElement} canvas\r\n   */\r\n  constructor(canvas) {\r\n    this.canvas = canvas;\r\n    this.keyDown = {};\r\n    this.keyCodeDown = new Array(256);\r\n    this.mouseX = 0;\r\n    this.mouseY = 0;\r\n    this.mouseWheel = 0;\r\n    this.lBtnDown = false;\r\n    this.mBtnDown = false;\r\n    this.rBtnDown = false;\r\n    this.mouseLeave = true;\r\n  }\r\n\r\n  listen() {\r\n    this.canvas.addEventListener('mouseleave', () => {\r\n      this.mouseLeave = true;\r\n    });\r\n    this.canvas.addEventListener('mouseenter', () => {\r\n      this.mouseLeave = false;\r\n    });\r\n    this.canvas.addEventListener('mousemove', (e) => {\r\n      this.mouseX = e.offsetX;\r\n      this.mouseY = e.offsetY;\r\n    });\r\n    this.canvas.addEventListener('mousedown', (e) => {\r\n      this.mouseX = e.offsetX;\r\n      this.mouseY = e.offsetY;\r\n      switch (e.button) {\r\n        case 0:\r\n          this.lBtnDown = true;\r\n          break;\r\n        case 1:\r\n          this.mBtnDown = true;\r\n          break;\r\n        case 2:\r\n          this.rBtnDown = true;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n    this.canvas.addEventListener('mouseup', (e) => {\r\n      this.mouseX = e.offsetX;\r\n      this.mouseY = e.offsetY;\r\n      switch (e.button) {\r\n        case 0:\r\n          this.lBtnDown = false;\r\n          break;\r\n        case 1:\r\n          this.mBtnDown = false;\r\n          break;\r\n        case 2:\r\n          this.rBtnDown = false;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n    this.canvas.addEventListener('wheel', (e) => {\r\n      this.mouseWheel += Math.round(e.deltaY / 100);\r\n      this.mouseWheel = (this.mouseWheel + 100) % 100;\r\n    });\r\n    window.addEventListener('keydown', (e) => {\r\n      this.keyDown[e.key] = true;\r\n      this.keyCodeDown[e.keyCode] = true;\r\n    });\r\n    window.addEventListener('keyup', (e) => {\r\n      this.keyDown[e.key] = false;\r\n      this.keyCodeDown[e.keyCode] = false;\r\n    });\r\n  }\r\n}\r\n\r\nexport default Input;\r\n","import global from './global';\r\nimport allGameStates from './gameState/game.state';\r\n\r\nfunction main() {\r\n  const game = global.getGame();\r\n  game.changeState(allGameStates.playersTurn);\r\n  document.getElementById('triango').appendChild(game.getCanvas());\r\n  game.run();\r\n}\r\n\r\nmain();\r\n","// class State {\r\n//   constructor() {\r\n//     this.gameObjs = [];\r\n//   }\r\n\r\n// nextState() {\r\n//   throw 'abstract method';\r\n// }\r\n\r\n// handleInput() {\r\n//   throw 'abstract method';\r\n// }\r\n\r\n//   update() {\r\n//     this.gameObjs.forEach(obj => obj && obj.update && obj.update());\r\n//   }\r\n\r\n//   render() {\r\n//     this.gameObjs.forEach(obj => obj && obj.render && obj.render(this.ctx));\r\n//   }\r\n// }\r\n\r\nclass StateStack {\r\n  constructor() {\r\n    this.states = [];\r\n    this.top = 0;\r\n  }\r\n\r\n  pop() {\r\n    if (this.top < 1) {\r\n      return undefined;\r\n    }\r\n    return this.states[--this.top]; // eslint-disable-line\r\n  }\r\n\r\n  /** @param {State} state */\r\n  push(state) {\r\n    this.states[this.top++] = state; // eslint-disable-line\r\n  }\r\n\r\n  peek() {\r\n    if (this.top > 0) {\r\n      return this.states[this.top - 1];\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  length() {\r\n    return this.top;\r\n  }\r\n\r\n  clear() {\r\n    delete this.states;\r\n    this.states = [];\r\n    this.top = 0;\r\n  }\r\n\r\n  handleInput() {\r\n    const topState = this.peek();\r\n    return topState && topState.handleInput && topState.handleInput();\r\n  }\r\n\r\n  update() {\r\n    const topState = this.peek();\r\n    return topState && topState.update && topState.update();\r\n  }\r\n\r\n  render() {\r\n    const topState = this.peek();\r\n    return topState && topState.render && topState.render();\r\n  }\r\n}\r\n\r\nexport default StateStack;\r\n","const radical3 = 1.732;\r\nconst tan60 = radical3;\r\nconst cos30 = radical3 / 2;\r\n\r\nclass Triangle {\r\n  constructor(x, y, r, up = true, color = 'white') {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.r = r;\r\n    this.up = up;\r\n    this.color = color;\r\n    this.creatShape();\r\n  }\r\n\r\n  creatShape() {\r\n    this.x1 = this.x;\r\n    this.y1 = this.y;\r\n    this.x2 = this.x + this.r * radical3;\r\n    this.y2 = this.y;\r\n    this.x3 = this.x + this.r * cos30;\r\n    this.y3 = this.y + 1.5 * this.r;\r\n    if (this.up) {\r\n      this.y3 = this.y;\r\n      this.y2 = this.y + 1.5 * this.r;\r\n      this.y1 = this.y + 1.5 * this.r;\r\n    }\r\n  }\r\n\r\n  /** @param {CanvasRenderingContext2D} ctx */\r\n  draw(ctx) {\r\n    ctx.beginPath();\r\n    ctx.moveTo(this.x1, this.y1);\r\n    ctx.lineTo(this.x2, this.y2);\r\n    ctx.lineTo(this.x3, this.y3);\r\n    ctx.fillStyle = this.color;\r\n    ctx.closePath();\r\n    ctx.fill();\r\n    ctx.strokeStyle = 'black';\r\n    ctx.stroke();\r\n  }\r\n\r\n  mouseCheck(x, y) {\r\n    if (x < this.x1 || x > this.x2) {\r\n      return false;\r\n    }\r\n    if (!this.up) {\r\n      if (y > this.y3 || y < this.y1) {\r\n        return false;\r\n      }\r\n    } else if (y < this.y3 || y > this.y1) {\r\n      return false;\r\n    }\r\n    if (this.up) {\r\n      if (x < this.x3) {\r\n        if (y < (x - this.x3) * -tan60 + this.y3) {\r\n          return false;\r\n        }\r\n      } else if (y < (x - this.x3) * tan60 + this.y3) {\r\n        return false;\r\n      }\r\n    } else if (x < this.x3) {\r\n      if (y > (x - this.x1) * tan60 + this.y1) {\r\n        return false;\r\n      }\r\n    } else if (y > (x - this.x3) * -tan60 + this.y3) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\nexport default Triangle;\r\n","import Triangle from './triangle';\r\nimport global from './global';\r\n\r\nconst ctx = global.getCtx();\r\nconst input = global.getInput();\r\n\r\nconst CheckerState = {\r\n  normal: {\r\n    onStart: (tribtn) => {\r\n      tribtn.setColor('white');\r\n    },\r\n    handleInput: (tribtn) => {\r\n      const x = input.mouseX;\r\n      const y = input.mouseY;\r\n      if (!tribtn.triangle.mouseCheck(x, y)) {\r\n        return;\r\n      }\r\n      if (input.lBtnDown) {\r\n        tribtn.changeState(CheckerState.active);\r\n      } else {\r\n        tribtn.changeState(CheckerState.hover);\r\n      }\r\n    },\r\n  },\r\n  hover: {\r\n    onStart: (tribtn) => {\r\n      tribtn.setColor('yellow');\r\n    },\r\n    handleInput: (tribtn) => {\r\n      const x = input.mouseX;\r\n      const y = input.mouseY;\r\n      if (input.lBtnDown) {\r\n        tribtn.changeState(CheckerState.active);\r\n      } else if (!tribtn.triangle.mouseCheck(x, y)) {\r\n        tribtn.changeState(CheckerState.normal);\r\n      }\r\n    },\r\n  },\r\n  active: {\r\n    onStart: (tribtn) => {\r\n      tribtn.setColor('red');\r\n    },\r\n    handleInput: (tribtn) => {\r\n      const x = input.mouseX;\r\n      const y = input.mouseY;\r\n      if (!tribtn.triangle.mouseCheck(x, y)) {\r\n        tribtn.changeState(CheckerState.normal);\r\n        return;\r\n      }\r\n      if (!input.lBtnDown) {\r\n        tribtn.changeState(CheckerState.hover);\r\n      }\r\n    },\r\n  },\r\n};\r\n\r\nclass TriangleChecker {\r\n  constructor(x, y, r, up, color) {\r\n    this.triangle = new Triangle(x, y, r, up, color);\r\n    this.state = CheckerState.normal;\r\n    this.state.onStart(this);\r\n  }\r\n\r\n  setColor(color) {\r\n    this.triangle.color = color;\r\n  }\r\n\r\n  changeState(state) {\r\n    this.state = state;\r\n    this.state.onStart(this);\r\n  }\r\n\r\n  render() {\r\n    this.triangle.draw(ctx);\r\n    // return this.state && this.state.draw && this.state.draw(this);\r\n  }\r\n\r\n  handleInput() {\r\n    return this.state && this.state.handleInput && this.state.handleInput(this);\r\n  }\r\n\r\n  update() {\r\n    return this.state && this.state.update && this.state.update(this);\r\n  }\r\n}\r\n\r\nexport default TriangleChecker;\r\n","/* eslint-disable no-bitwise */\r\nimport TriangleChecker from './triangleChecker';\r\n\r\nconst cos30 = 0.866;\r\n\r\n/**\r\n * Enum for piece state\r\n * @readonly\r\n * @enum {number}\r\n */\r\nconst PieceState = {\r\n  void: -1,\r\n  blank: 0,\r\n  black: 1,\r\n  white: 2,\r\n  ban: 3,\r\n  ko: 4,\r\n};\r\n\r\nclass TriangoBoard {\r\n  constructor() {\r\n    // 棋盘数据，棋盘大小8x2x8, 数据大小 16*8*4 bit\r\n    this.black = new Uint16Array(8); // 黑棋\r\n    this.white = new Uint16Array(8); // 白棋\r\n    this.ban = new Uint16Array(8); // 禁入点\r\n    this.ko = new Uint16Array(8); // 劫\r\n    this.triangleCheckers = [];\r\n    let up = true;\r\n    const r = 25;\r\n    const offsetX = 180;\r\n    const offsetY = 120;\r\n    for (let j = 0; j < 8; j += 1) {\r\n      for (let i = 0; i < 16; i += 1) {\r\n        this.triangleCheckers.push(new TriangleChecker(offsetX + i * r * cos30 - j * r * cos30, offsetY + j * r * 1.5, r, up, 'white'));\r\n        up = !up;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 通过棋盘坐标获得数据\r\n   * @param {number} x △▽ 的 x坐标 0~7\r\n   * @param {number} y △▽ 的 y坐标 0~7\r\n   * @param {boolean} up ture:获得△的状态,false：获得▽的状态\r\n   * @returns {number} 返回一个棋子状态的“枚举值”\r\n   */\r\n  getData(x, y, up) {\r\n    if (x < 0 || x > 7 || y < 0 || y > 7) {\r\n      return PieceState.void;\r\n    }\r\n    const z = up ? 0 : 1;\r\n    const flag = 1 << (x * 2 + z);\r\n    if (this.black[y] & flag) {\r\n      return PieceState.black;\r\n    }\r\n    if (this.white[y] & flag) {\r\n      return PieceState.white;\r\n    }\r\n    if (this.ban[y] & flag) {\r\n      return PieceState.ban;\r\n    }\r\n    if (this.ko[y] & flag) {\r\n      return PieceState.ko;\r\n    }\r\n    return PieceState.blank;\r\n  }\r\n\r\n  /**\r\n   * 通过棋盘坐标设置数据\r\n   * @param {number} x △▽ 的 x坐标 0~7\r\n   * @param {number} y △▽ 的 y坐标 0~7\r\n   * @param {boolean} up ture:设置△的状态,false：设置▽的状态\r\n   * @param {PieceState} data 棋子的状态 {PieceState}\r\n   */\r\n  setData(x, y, up, data) {\r\n    if (x < 0 || x > 7 || y < 0 || y > 7) {\r\n      return;\r\n    }\r\n    const z = up ? 0 : 1;\r\n    const flag = 1 << (x * 2 + z);\r\n\r\n    this.black[y] &= ~flag;\r\n    this.white[y] &= ~flag;\r\n    this.ban[y] &= ~flag;\r\n    this.ko[y] &= ~flag;\r\n\r\n    switch (data) {\r\n      case PieceState.black:\r\n        this.black[y] |= flag;\r\n        break;\r\n      case PieceState.white:\r\n        this.white[y] |= flag;\r\n        break;\r\n      case PieceState.ban:\r\n        this.ban[y] |= flag;\r\n        break;\r\n      case PieceState.ko:\r\n        this.ko[y] |= flag;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  update() {\r\n    this.triangleCheckers.forEach((triangleChecer) => {\r\n      triangleChecer.update();\r\n    });\r\n  }\r\n\r\n  render() {\r\n    this.triangleCheckers.forEach((triangleChecer) => {\r\n      triangleChecer.render();\r\n    });\r\n  }\r\n\r\n  handleInput() {\r\n    this.triangleCheckers.forEach((triangleChecer) => {\r\n      triangleChecer.handleInput();\r\n    });\r\n  }\r\n}\r\n\r\nexport default TriangoBoard;\r\n"],"sourceRoot":""}